/*
 * generated by Xtext 2.10.0
 */
package com.github.funthomas424242.dsl.generator

import com.github.funthomas424242.dsl.ahnen.Familienbuch
import com.github.funthomas424242.dsl.generator.database.DataXMLGenerator
import com.github.funthomas424242.dsl.generator.docbook.BookGenerator
import com.github.funthomas424242.dsl.generator.docbook.POMGenerator
import java.io.File
import java.io.FileInputStream
import java.nio.file.Files
import org.eclipse.emf.common.util.URI
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import com.github.funthomas424242.dsl.ahnen.ReportUsage
import com.github.funthomas424242.dsl.generator.csv.CSVBookGenerator

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class AhnenGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		for (buch : resource.allContents.toIterable.filter(Familienbuch)) {
		    // generate csv export
		    fsa.generateFile(Helper.getCSVExportFileName(buch), CSVBookGenerator.createBookExport(fsa,buch));
		    
		    // generate gramps database file
		    var File grampsDbfileFile=null;
		    if( buch.includeGramps == ReportUsage.INCLUDE || buch.includeGrampsArchive == ReportUsage.INCLUDE ){
    			fsa.generateFile(Helper.getGrampsDBFileName(buch),DataXMLGenerator.createGrampsDBContent(buch));
	       		var URI grampsDbfileURI=fsa.getURI(Helper.getGrampsDBFileName(buch));
			    grampsDbfileFile = Helper.convertURI2File(buch,grampsDbfileURI);
			}
			// include media folder
			var File mediaFolderFile = null;
			if( buch.includeMedia == ReportUsage.INCLUDE){
    			mediaFolderFile=Helper.getMediaFolderFile(buch,fsa);
    			mediaFolderFile.mkdirs();
			}
			// generate gramps archive
			if( buch.includeGrampsArchive == ReportUsage.INCLUDE){
    			var File grampsArchiveFileTmp = Files.createTempFile("gramps",null).toFile();
	       	    Helper.createTarGZ(grampsArchiveFileTmp, grampsDbfileFile ,mediaFolderFile);
		        var FileInputStream fIn = new FileInputStream(grampsArchiveFileTmp);
		        fsa.generateFile(Helper.getGrampsArchiveFileName(buch),fIn);
		    }
		    // generate docbook project
		    if( buch.includeDocbook == ReportUsage.INCLUDE){
    			fsa.generateFile(Helper.getPOMFileName(buch), POMGenerator.createPOMContent(buch))
	       		fsa.generateFile(Helper.getDbkFileName(buch, "book.dbk"), BookGenerator.createBookContent(fsa, buch))
			}
		}
	}
}
