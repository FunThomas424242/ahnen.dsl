/**
 * generated by Xtext 2.10.0
 */
package com.github.funthomas424242.dsl.ahnen.impl;

import com.github.funthomas424242.dsl.ahnen.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class AhnenFactoryImpl extends EFactoryImpl implements AhnenFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static AhnenFactory init()
  {
    try
    {
      AhnenFactory theAhnenFactory = (AhnenFactory)EPackage.Registry.INSTANCE.getEFactory(AhnenPackage.eNS_URI);
      if (theAhnenFactory != null)
      {
        return theAhnenFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new AhnenFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AhnenFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case AhnenPackage.MODEL: return createModel();
      case AhnenPackage.DATEIART: return createDateiart();
      case AhnenPackage.FAMILIE: return createFamilie();
      case AhnenPackage.PERSON: return createPerson();
      case AhnenPackage.EREIGNIS: return createEreignis();
      case AhnenPackage.SCHULAUSBILDUNG: return createSchulausbildung();
      case AhnenPackage.TAETIGKEIT: return createTaetigkeit();
      case AhnenPackage.KINDER: return createKinder();
      case AhnenPackage.BEZIEHUNG: return createBeziehung();
      case AhnenPackage.FAMILIENBUCH: return createFamilienbuch();
      case AhnenPackage.FAMILIEN_IMPORT: return createFamilienImport();
      case AhnenPackage.AUTOR: return createAutor();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case AhnenPackage.GESCHLECHT:
        return createGeschlechtFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case AhnenPackage.GESCHLECHT:
        return convertGeschlechtToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Dateiart createDateiart()
  {
    DateiartImpl dateiart = new DateiartImpl();
    return dateiart;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Familie createFamilie()
  {
    FamilieImpl familie = new FamilieImpl();
    return familie;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Person createPerson()
  {
    PersonImpl person = new PersonImpl();
    return person;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Ereignis createEreignis()
  {
    EreignisImpl ereignis = new EreignisImpl();
    return ereignis;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Schulausbildung createSchulausbildung()
  {
    SchulausbildungImpl schulausbildung = new SchulausbildungImpl();
    return schulausbildung;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Taetigkeit createTaetigkeit()
  {
    TaetigkeitImpl taetigkeit = new TaetigkeitImpl();
    return taetigkeit;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Kinder createKinder()
  {
    KinderImpl kinder = new KinderImpl();
    return kinder;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Beziehung createBeziehung()
  {
    BeziehungImpl beziehung = new BeziehungImpl();
    return beziehung;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Familienbuch createFamilienbuch()
  {
    FamilienbuchImpl familienbuch = new FamilienbuchImpl();
    return familienbuch;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FamilienImport createFamilienImport()
  {
    FamilienImportImpl familienImport = new FamilienImportImpl();
    return familienImport;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Autor createAutor()
  {
    AutorImpl autor = new AutorImpl();
    return autor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Geschlecht createGeschlechtFromString(EDataType eDataType, String initialValue)
  {
    Geschlecht result = Geschlecht.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertGeschlechtToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AhnenPackage getAhnenPackage()
  {
    return (AhnenPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static AhnenPackage getPackage()
  {
    return AhnenPackage.eINSTANCE;
  }

} //AhnenFactoryImpl
